rm(list=ls())
if (!require("foreign")){
install.packages("foreign", dependencies = TRUE)
library(foreign)
}
source("f_generate_discretized_data.R")
#### 1 - Cargamos los datos SIN NORMALIZAR
exon_data = read.arff("../data/continuous/exon_data_48278_hclust100.arff")
filter_percentage = 0 # 1 - filter_percentage de instancias con el mismo valor
filtered_exon_data = filter_columns_for_disc(exon_data, filter_percentage, debug_output = TRUE)
#### 3 - Discretizamos los datos utilizando nuestra version equal_width que considera el punto cero como un caso especial
#### El numero de breaks es aparte del 0, por lo que si queremos una variable discreta con 3 estados habria que seleccionar 2 breaks
discrete_data = discretize_equal_with_considering_zero(data = filtered_exon_data, numberOfBreaks = 3, debug_output = TRUE)
View(discrete_data)
levels(discrete_data$x3324)
e1-15
1e15
1e-15
filter_percentage = 0 # 1 - filter_percentage de instancias con el mismo valor
filtered_exon_data = filter_columns_for_disc(exon_data, filter_percentage, debug_output = TRUE)
#### 3 - Discretizamos los datos utilizando nuestra version equal_width que considera el punto cero como un caso especial
#### El numero de breaks es aparte del 0, por lo que si queremos una variable discreta con 3 estados habria que seleccionar 2 breaks
discrete_data = discretize_equal_with_considering_zero(data = filtered_exon_data, numberOfBreaks = 3, debug_output = TRUE)
rm(list=ls())
if (!require("foreign")){
install.packages("foreign", dependencies = TRUE)
library(foreign)
}
source("f_generate_discretized_data.R")
#### 1 - Cargamos los datos SIN NORMALIZAR
exon_data = read.arff("../data/continuous/exon_data_48278_hclust100.arff")
#### 2 - Filtramos aquellas columnas cuyos valores se encuentren fuertemente centradas alrededor de un valor (por ejemplo el cero)
#### Para ello establecemos que para ser filtrado deben de estar en dicho valor el (100-filter_percentage)% de las instancias
filter_percentage = 0 # 1 - filter_percentage de instancias con el mismo valor
filtered_exon_data = filter_columns_for_disc(exon_data, filter_percentage, debug_output = TRUE)
#### 3 - Discretizamos los datos utilizando nuestra version equal_width que considera el punto cero como un caso especial
#### El numero de breaks es aparte del 0, por lo que si queremos una variable discreta con 3 estados habria que seleccionar 2 breaks
discrete_data = discretize_equal_with_considering_zero(data = filtered_exon_data, numberOfBreaks = 3, debug_output = TRUE)
View(discrete_data)
levels(discrete_data$x3324)
for(i in 1:ncol(discrete_data)){
levels(discrete_data[,i]) = c(0,"low","medium","high")
}
write.arff(x = discrete_data, file = "../data/discrete/exon_data_48278_hclust100_disc.arff", relation = "exon_data_48278_hclust100_disc")
